# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Schemas --
GET           /api/v1/schemas                         controllers.models.SchemaController.getAllMeterSchemas
GET           /api/v1/schemas/:id                     controllers.models.SchemaController.getMeterSchema(id: String)
+ nocsrf
POST          /api/v1/schemas                         controllers.models.SchemaController.addMeterSchema
+ nocsrf
DELETE        /api/v1/schemas/:id                     controllers.models.SchemaController.deleteMeterSchema(id: String)

# Meter --
GET           /api/v1/meters                          controllers.models.MeterController.getAllMeters
GET           /api/v1/meters/:id                      controllers.models.MeterController.getMeter(id: String)
# + nocsrf
POST          /api/v1/meters/:id                      controllers.models.MeterController.updateMeter(id: String)
+ nocsrf
POST          /api/v1/meters                          controllers.models.MeterController.createMeter
+ nocsrf
DELETE        /api/v1/meters/:id                      controllers.models.MeterController.deleteMeter(id: String)

# Meter entries --
GET           /api/v1/entries/:date                   controllers.models.MeterEntryController.findEntriesByDate(date: String, days: Option[Int])
GET           /api/v1/entries/:date/:meterId          controllers.models.MeterEntryController.findMeterEntriesByDate(date: String, meterId: String, days: Option[Int])

+ nocsrf
POST          /api/v1/entries/:date/:meterId          controllers.models.MeterEntryController.upsertMeterEntry(meterId: String, date: String)

GET           /api/v1/is-signed-in                    controllers.auth.IsSignedInController.isSignedIn

+ nocsrf
POST          /api/v1/sign-in                         controllers.auth.SignInController.signIn
POST          /api/v1/sign-out                        controllers.auth.SignOutController.signOut
+ nocsrf
POST          /api/v1/sign-up                         controllers.auth.SignUpController.signUp
GET           /api/v1//sign-out                       controllers.auth.SignOutController.signOut

POST          /api/v1/account/activation              controllers.auth.AccountController.send
GET           /api/v1/account/activation/:token       controllers.auth.AccountController.activate(token: java.util.UUID)

POST         /api/v1/password/recovery                controllers.auth.PasswordController.recover
GET          /api/v1/password/recovery/:token         controllers.auth.PasswordController.validate(token: java.util.UUID)
POST         /api/v1/password/recovery/:token         controllers.auth.PasswordController.reset(token: java.util.UUID)

# GET         /api/v1/account/email/:email            controllers.ActivateAccountController.send(email: String)

# Swagger docs
GET          /                                        controllers.models.ApiDocsController.redirectToDocs
GET          /api/v1/swagger.json                     controllers.ApiHelpController.getResources
GET          /api/v1/api-docs                         controllers.models.ApiDocsController.redirectToDocs

# Map static resources from the /public folder to the /assets URL path
GET          /assets/*file                            controllers.Assets.versioned(path="/public", file: Asset)
